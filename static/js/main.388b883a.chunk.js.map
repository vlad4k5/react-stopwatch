{"version":3,"sources":["App.jsx","index.js"],"names":["App","useState","seconds","setSeconds","isRunning","setIsRunning","isClicked","setIsClicked","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","onClickStopStartButton","useCallback","onClickResetButton","onClickWaitButton","setTimeout","className","Date","toISOString","slice","onClick","ReactDOM","render","document","getElementById"],"mappings":"iQAgEeA,EA3DH,WAAO,IAAD,EAEcC,mBAAS,GAFvB,mBAETC,EAFS,KAEAC,EAFA,OAGkBF,oBAAS,GAH3B,mBAGTG,EAHS,KAGEC,EAHF,OAIkBJ,oBAAS,GAJ3B,mBAITK,EAJS,KAIEC,EAJF,KAMhBC,qBAAU,WACR,IAAMC,EAAe,IAAIC,IAQzB,OAPAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACLV,GACFD,GAAW,SAAAY,GAAG,OAAIA,EAAM,UAGvB,WACLN,EAAaO,OACbP,EAAaQ,cAEd,CAACb,IAEJ,IAAMc,EAAyBC,uBAAY,WACrCf,GACFC,GAAa,GACbF,EAAW,IAEXE,GAAa,KAEd,CAACD,IAEEgB,EAAqBD,uBAAY,WACrChB,EAAW,GACXE,GAAa,KACZ,IAEGgB,EAAoBF,uBAAY,WAChCb,GACFD,GAAa,GAEfiB,YAAW,kBAAMf,GAAa,KAAQ,KACtCA,GAAa,KACZ,CAACD,IAEJ,OAAO,qBAAKiB,UAAU,eAAf,SACL,gCAEE,sBAAKA,UAAU,QAAf,cAAyB,IAAIC,KAAKtB,GAASuB,cAAcC,MAAM,GAAI,OAEnE,sBAAKH,UAAU,UAAf,UACE,wBAAQA,UAAWnB,EAAY,aAAe,cAAeuB,QAAST,EAAtE,SACGd,EAAY,OAAQ,UAEvB,wBAAQmB,UAAU,aAAaI,QAASN,EAAxC,kBACA,wBAAQE,UAAU,cAAcI,QAASP,EAAzC,4BCrDRQ,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.388b883a.chunk.js","sourcesContent":["import \"./App.scss\"\nimport { useEffect, useState, useCallback } from \"react\"\nimport  {Subject, interval } from \"rxjs\"\nimport { takeUntil } from \"rxjs/operators\"\n\nconst App = () => {\n\n  const [seconds, setSeconds] = useState(0)\n  const [isRunning, setIsRunning] = useState(false)\n  const [isClicked, setIsClicked] = useState(false)\n \n  useEffect(() => {\n    const unsubscribe$ = new Subject() \n    interval(1000)\n      .pipe(takeUntil(unsubscribe$))\n      .subscribe(() => {\n        if (isRunning) {\n          setSeconds(val => val + 1000)\n        }\n      })\n    return () => {\n      unsubscribe$.next()\n      unsubscribe$.complete()\n    }\n  }, [isRunning])\n \n  const onClickStopStartButton = useCallback(() => {\n    if (isRunning){\n      setIsRunning(false)\n      setSeconds(0)\n    } else{\n      setIsRunning(true)\n    }\n  }, [isRunning])\n \n  const onClickResetButton = useCallback(() => {\n    setSeconds(0)\n    setIsRunning(true)\n  }, [])\n \n  const onClickWaitButton = useCallback(() => {\n    if (isClicked){\n      setIsRunning(false)\n    }\n    setTimeout(() => setIsClicked(false), 300)\n    setIsClicked(true)\n  }, [isClicked])\n \n  return <div className=\"appContainer\">\n    <div>\n\n      <div className=\"timer\"> {new Date(seconds).toISOString().slice(11, 19)}</div>\n\n      <div className=\"buttons\">\n        <button className={isRunning ? \"stopButton\" : \"startButton\"} onClick={onClickStopStartButton}>\n          {isRunning ? \"Stop\": \"Start\"}\n        </button>\n        <button className=\"waitButton\" onClick={onClickWaitButton}>Wait</button>\n        <button className=\"resetButton\" onClick={onClickResetButton}>Reset</button>\n      </div>\n      \n    </div>\n  </div>\n}\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}